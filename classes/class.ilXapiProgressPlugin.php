<?php
/* Copyright (c) internetlehrer GmbH, Extended GPL, see LICENSE */

use ILIAS\DI\Container;
use ILIAS\Plugin\XapiProgress\Event\Services\Tracking\H5P;
use ILIAS\Plugin\XapiProgress\Event\Services\Tracking\UpdateStatus;
use ILIAS\Plugin\XapiProgress\Event\Services\Tracking\SendAllStatements;
#use ILIAS\Plugin\XapiProgress\XapiProgressRouterGUI;
use ILIAS\Plugins\XapiProgress\Router\HandlePsr7XapiRequest;
use ILIAS\GlobalScreen\Scope\MainMenu\Provider\AbstractStaticPluginMainMenuProvider;
use ILIAS\Plugin\XapiProgress\Xapi\Request\XapiRequest;

require_once __DIR__ . "/../vendor/autoload.php";

//include_once("./Services/Cron/classes/class.ilCronHookPlugin.php");

/**
 * Class ilXapiProgressPlugin
 *
 * @author      Uwe Kohnle <kohnle@internetlehrer-gmbh.de>
 */
class ilXapiProgressPlugin extends ilUserInterfaceHookPlugin {

	const PLUGIN_ID = "xapip";

    const PLUGIN_NAME = "XapiProgress";

    const PLUGIN_CLASS_NAME = ilXapiProgressPlugin::class;

    CONST PLUGIN_COMPONENT = 'Plugins/XapiProgress';

    private int $methodCallable = 1;

    protected Container $dic;

    protected ilSetting $settings;

    protected array $taskExec = [];

    private array $storedParams = [];

//    public array $allowedEvents;

    public bool $isHandlePsr7XapiRequest = false;

    private Closure $HandlePsr7XapiRequest;

    protected static ilXapiProgressPlugin $instance;

//    private ilXapiProgressConfig $config;

    use ILIAS\Plugin\XapiProgress\Model\DbXapiProgressQueue;



    /**
     * @inheritdoc
     */
	public function __construct()
    {

        global $DIC;

        $this->dic = $DIC;

        $this->settings = $this->dic->settings();

//        $this->config = new ilXapiProgressConfig();
//        $this->allowedEvents = $this->config->getEvents();

        $component_repository = $DIC['component.repository'];
        parent::__construct($this->dic->database(),$component_repository,self::PLUGIN_ID);

    }


    /**
     * @throws \ILIAS\HTTP\Response\Sender\ResponseSendingException
     */
    public function __destruct()
    {

    }

    public function getCronJobInstances() : array
    {
        return [
            new ilXapiProgressCron()
        ];
    }
//
//    public function getCronJobInstance($a_job_id) : \ilCronJob #ilXapiProgressCron
//    {
//        switch ($a_job_id)
//        {
//            case ilXapiProgressCron::JOB_ID:
//
//                return new ilXapiProgressCron();
//
//            default:
//
//                return null;
//        }
//    }
	
	
	/**
	 * @inheritdoc
	 */
	public function getPluginName() : string
    {
		return self::PLUGIN_NAME;
	}

    public static function hasLrsType() : bool
    {
        $config = new ilXapiProgressConfig();
        $lrsTypeId = $config->getLrsTypeId();
        if ($lrsTypeId == null) return false;
        return true;
    }

    public static function getLrsType() : ?ilCmiXapiLrsType
    {
        global $DIC;
        $config = new ilXapiProgressConfig();
        $lrsTypeId = $config->getLrsTypeId();

        $DIC->logger()->root()->debug("LrsType=".$lrsTypeId);

        if( $lrsTypeId != null )
        {
            return new ilCmiXapiLrsType($lrsTypeId);
        }
        else
        {
            return null;
        }
    }

	/**
	 * @inheritdoc
	 */
	protected function deleteData()
	{
        $this->settings->delete(self::PLUGIN_ID . '__lrs_type_id');
        $this->settings->delete($this->getId() . '__events');
        $this->settings->delete($this->getId() . '__untracked_verbs');
	}

    protected function afterInstall() : void
    {
        parent::afterInstall();
    }

    protected function beforeActivation(): bool
    {
        ilXapiProgressAsyncCron::installAsyncJob($this);

        return parent::beforeActivation(); // TODO: Change the autogenerated stub
    }

    protected function afterActivation():void
    {
        parent::afterActivation(); // TODO: Change the autogenerated stub

//        if(!$this->settings->get($this->getId() . '__events')) {
//            $this->settings->set($this->getId() . '__events', json_encode(self::getDefaultEvents()));
//        }

    }

    protected function afterDeactivation(): void
    {
        ilXapiProgressAsyncCron::uninstallAsyncJob($this);

        parent::afterDeactivation(); // TODO: Change the autogenerated stub
    }

    protected function afterUninstall(): void
    {
        global $DIC;
        $ilDB = $DIC->database();

        if( $ilDB->tableExists('xapip_queue') ) {
            $ilDB->dropTable('xapip_queue');
        }
        if( $ilDB->tableExists('xapip_queue_seq') ) {
            $ilDB->dropTable('xapip_queue_seq');
        }
        if( $ilDB->tableExists('xapip_data') ) {
            $ilDB->dropTable('xapip_data');
        }
        if( $ilDB->tableExists('xapip_settings') ) {
            $ilDB->dropTable('xapip_settings');
        }
        if( $ilDB->tableExists('xapip_settings_seq') ) {
            $ilDB->dropTable('xapip_settings_seq');
        }
        if( $ilDB->tableExists('xapip_consent_log') ) {
            $ilDB->dropTable('xapip_consent_log');
        }
    }

    /**
     * @param string $component
     * @param string $event
     * @param array $parameters
     * @throws Exception
     */
    public function handleEvent(string $component, string $event, array $parameters)
    {

        global $DIC; /** @var Container $DIC */

        $this->dic = $this->dic ?? $DIC;
        $config = new ilXapiProgressConfig();
        $allowedEvents = $config->getEvents();

        #$this->dic->logger()->root()->info('#################### XapiProgress handleEvent');

        if(in_array($event, $allowedEvents)) {

            $parameters['event'] = $event;

            $parameters['component'] = $component;

            $parameters['usr_id'] = $parameters['usr_id'] ?? $parameters['user_id'] ?? 0;

            unset($parameters['user_id']);

            if (!isset($parameters['obj_id']) && isset($parameters['ref_id'])) {

                $parameters['obj_id'] = ilObject::_lookupObjId($parameters['ref_id']);

            }

            if (!isset($parameters['ref_id']) && null !== ($refId = $this->getRefForObjId($parameters['obj_id'] ?? 0))) {

                $parameters['ref_id'] = $refId;

            }

            switch(true) {

                case !$this->hasLrsType():
                case empty($parameters['ref_id']):
                case empty($parameters['obj_id']):
                case empty($parameters['usr_id']):
                case !$this->privacyAllowed($parameters['ref_id'],$parameters['usr_id'],$config):

//                case $this->storedParams[$event] === $parameters:

                    $this->dic->logger()->root()->debug('#################### XapiProgress handleEvent break @LINE: ' . __LINE__);

                    break;


                default:

                    $this->storedParams[$event] = $parameters;

                    $parameters['date'] = date('Y-m-d H:i:s');

                    if (null !== $queueId = $this->addInitialDbEntrty($parameters)) {

                        $this->dic->logger()->root()->debug('#################### XapiProgress handleEvent addInitialDbEntrty: ' . $queueId);

                        $lrsType = \ilXapiProgressPlugin::getLrsType();

                        $lrsRequest = new XapiRequest(
                            $lrsType->getLrsEndpointStatementsLink(),
                            $lrsType->getLrsKey(),
                            $lrsType->getLrsSecret()
                        );
                        $statusLrsRequest = $lrsRequest->sendStatement($this->statement);
                        if($statusLrsRequest){
                            $this->dic->logger()->root()->debug('#################### SUCCESS sendStatement instantly with queueId: ' . $queueId);
                            $this->deleteQueueEntryById($queueId);
                        } else {
                            $this->updateQueueEntryWithStateAndFailedDateById($queueId, self::$STATE_CRON_EXEC_1, date('Y-m-d H:i:s'));
                            $this->dic->logger()->root()->debug('#################### FAILED sendStatement instantly with queueId: ' . $queueId);
                        }

/*
                        $ns = implode('\\', [
                            'ILIAS\Plugin\XapiProgress',
                            'Event',
                            str_replace('/', '\\', $component),
                            ucfirst($event)
                        ]);

                        $this->execTask($ns, $queueId);
*/
                    }

                    break;
            }

        }
    }


//    public function execTask(string $ns, int $queueId) : bool
//    {
//        if(array_key_exists($ns, $this->taskExec)) {
//
//            return true;
//
//        } else {
//
//            $this->taskExec[$ns] = microtime();
//
//            try {
//
//                #self::endpointCall(XapiProgressRouterGUI::EXEC_BT, ['queue_id' => $queueId, 'event' => $ns]);
//
//                /** @var H5P|SendAllStatements|UpdateStatus $ns */
//                new $ns($queueId);
//
//            } catch (Exception $e) {
//
//                unset($this->taskExec[$ns]);
//
//                $this->dic->logger()->root()->dump($e);
//
//            }
//
//        }
//
//        return true;
//    }


    public function privacyAllowed(int $refId, int $usrId, \ilXapiProgressConfig $config) : bool
    {
//        $xlpp = null;
//        //todo xlpp
//        $component_repository = $this->dic['component.repository'];
//        if(!$component_repository->hasPluginId('xlpp')) {
//            $this->dic->logger()->root()->debug('LpPrivacy-Plugin is not installed');
//            return true;
//        }

        //        if(!(ilPluginAdmin::getAllPlugins()['xlpp'] ?? false)) {
//
//            $this->dic->logger()->root()->debug('LpPrivacy-Plugin is not installed');
//
//            return true;
//
//        }

//        try {
//
//            if($xlpp = ilPluginAdmin::getPluginObjectById('xlpp')) {
//
//                $this->dic->logger()->root()->debug('LpPrivacy-Plugin detected');
//
//            }
//
//        } catch(Exception $e) {
//
//            $this->dic->logger()->root()->dump($e);
//
//            return true;
//
//        }

        #if((int)$xlpp->getVersion() === (int)$xlpp->getLastUpdateVersion()) {
        $onlyCourse = false;

        if (!$config->isOnlyCourse()) return true;

        $allowedCourse = true;
        $courses = $config->getCourses();
//        $this->dic->logger()->root()->debug('CheckCourse');
        $courseToCheck = 0;
        if (count($courses) > 0) {
            $allowedCourse = false;
            $tree = array_reverse($this->dic->repositoryTree()->getPathFull($refId));
            foreach($tree as $node) {
                if ($node['type'] === 'crs') {
                    if (in_array($node['ref_id'], $courses)) {
                        $allowedCourse = true;
                        $courseToCheck = $node['ref_id'];
                    }
                }
            }
        }
        if (!$allowedCourse) return false;

        if (!$config->isNeedConsent()) return true;

        if ($courseToCheck > 0) {
            return $config->getConsentForUser($usrId,$courseToCheck);
        }

        $usrConsent = false;
        $tree = array_reverse($this->dic->repositoryTree()->getPathFull($refId));
        foreach($tree as $node) {
            if ($node['type'] === 'crs') {
                $usrConsent = $config->getConsentForUser($usrId,$node['ref_id']);
            }
        }
        return $usrConsent;
//
//
//
//
//
//
//
//        if ($config->getCourses())
//
//
////todo check with xlpp
//        $xlppActive = false;
//        foreach ($component_repository->getPlugins() as $pl) {
//            if ($pl->getId() == 'xlpp' && $pl->isActive()) {
//                $xlpp = $pl;
//                $xlppActive = true;
//            }
//        }
////            $xlpp = new ilPlugin($this->db,$component_repository,'xlpp');
//        if($xlppActive) {
//
//            $this->dic->logger()->root()->debug('LpPrivacy-Plugin is active');
//
//            $tree = array_reverse($this->dic->repositoryTree()->getPathFull($param['ref_id']));
//
//            foreach($tree as $node) {
//
//                if ($node['type'] === 'crs') {
//
//                    if( $xlpp->getConfig()->getCheck('lp2lrscy_' . $node['ref_id'] . '_' . $param['usr_id'] ) ) {
//
//                        return true;
//
//                    } else {
//
//                        $this->dic->logger()->root()->debug('LpPrivacy-Status: NOT allowed');
//
//                        return false;
//
//                    }
//
//                }
//
//            }
//
//        } else {
//
//            $this->dic->logger()->root()->debug('LpPrivacy-Plugin is installed but not active');
//
//            return true;
//
//        }
//
//        return false;

    }


    public function getRefForObjId($objId) : ?int
    {
        $refs = ilObject::_getAllReferences($objId) ?? [null];

        $refId = array_pop($refs);

        return $refId;
    }


    /**
     * @throws Exception
     */
    public static function getDefaultEvents() : array
    {
        global $DIC; /** @var Container $DIC */

        /*
        $jsonFileContent =  $DIC->refinery()->to()->string()->transform(
            file_get_contents( dirname(__DIR__, 1) . '/plugin.ini.json')
        );
*/
        $jsonFileContent =  file_get_contents( dirname(__DIR__, 1) . '/plugin.ini.json');

        $configParam = json_decode($jsonFileContent, 1);

        return $configParam['defaultEvents'] ?? [];
    }

    public static function getSelectedEvents()
    {
        $instance = new self();
        $config = new ilXapiProgressConfig();
        return $config->getEvents();
//        return json_decode($instance->settings->get($instance->getId() . '__events', 0));
    }


    public static function getAllVerbs(bool $removePrefix = true) : array
    {
        $defaultVerbList = ilCmiXapiVerbList::getInstance()->getSelectOptions();

        array_shift($defaultVerbList);

        $verbList = $defaultVerbList;

        if((int)ILIAS_VERSION > 6 && $removePrefix) {

            foreach (($defaultVerbList) as $key => $verb) {

                $verbPart = explode('_', $verb);

                $verbList[$key] = substr(array_pop($verbPart), 0);
            }

        }
//die(var_dump($verbList));
        return $verbList;

    }


    public static function endpointCall(string $action, array $param = [], string $method = 'POST', bool $returnTransfer = true, bool $async = true,  string $contentType = 'application/json;charset=UTF-8') : ?string
    {

        $url = ILIAS_HTTP_PATH . '/' . XapiProgressRouterGUI::getUrl($action);

        $isPost = in_array(strtoupper($method), ['POST', 'PUT']);

        #$timeout = 60;
        $maxRedirects = 10;

        $header = [
            'content-type: ' . ($isPost ? 'application/x-www-form-urlencoded' : $contentType),
            'accept: application/json, text/plain, */*',
        ];

        try {

            $curl = new ilCurlConnection($url);

            $curl->init();

            #0 === strpos(ILIAS_VERSION, 5) ? $curl->init() : $curl->init(false);

            $curl->setOpt(CURLOPT_SSL_VERIFYPEER, false);
            $curl->setOpt(CURLOPT_SSL_VERIFYHOST, false);
            $curl->setOpt(CURLOPT_COOKIE, json_encode($_COOKIE));

            #$curl->setOpt(CURLOPT_CONNECTTIMEOUT, $timeout);
            $curl->setOpt(CURLOPT_FOLLOWLOCATION, true);
            $curl->setOpt(CURLOPT_MAXREDIRS, $maxRedirects);
            $curl->setOpt(CURLOPT_HTTPHEADER, $header);
            $curl->setOpt(CURLOPT_CUSTOMREQUEST, strtoupper($method));
            if( $isPost ) {
                $curl->setOpt(CURLOPT_POST, 1);
                $curl->setOpt(CURLOPT_POSTFIELDS, http_build_query($param));
            }
            $curl->setOpt(CURLOPT_RETURNTRANSFER, $returnTransfer);

            $response = $curl->exec();

            if(!$returnTransfer) {

                return null;

            }

            #echo '<pre>'; var_dump($response); exit;
            $code = (int)$curl->getInfo(CURLINFO_HTTP_CODE);

            $json = json_decode($response, true);

            $json['http_code'] = $code;

            $json['called_param'] = $param;

            if( strlen($json['error']) && substr($json['error'], -1) !== '.' ) {

                $json['error'] .= '.';

            }

            $json['called_endpoint'] = $url;

            $json['called_method'] = $method;

        } catch (ilCurlConnectionException $e) {

            $json = [
                'success' => false,
                'error' => $e->getMessage()
            ];

            if( (bool)strlen($json['error']) ) {

                $instance = new self();

                $instance->dic->logger()->root()->dump($json);

            }

        }

        $instance = new self();

        $instance->dic->logger()->root()->dump($json);

        return json_encode($json);

    }

//    aus LearningProcessDashboard


	public static function getInstance() : ilXapiProgressPlugin 
    {
		if (!isset(self::$instance)) {
			self::$instance = new self();
		}

		return self::$instance;
	}
/*    
   	public static function getRootDir(): string {
		return dirname(dirname(__FILE__)) . '/';
	}

*/
}
